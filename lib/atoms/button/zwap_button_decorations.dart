part of zwap_button;

class ZwapButtonDecorations {
  final BorderRadius? borderRadius;
  final Border? border;
  final Border? hoverBorder;
  final Border? disabledBorder;
  final Border? pressedBorder;

  final EdgeInsets internalPadding;

  /// Also named active border
  final Border? focussedBorder;

  final Color? backgroundColor;
  final Color? hoverColor;
  final Color? disabledColor;
  final Color? pressedColor;

  /// Also named active color
  final Color? focussedColor;

  /// If both [backgroundColor] and [gradient] are provided, [backgroundColor] will be ignored
  final Gradient? gradient;

  /// If both [hoverColor] and [hoverGradient] are provided, [hoverColor] will be ignored
  final Gradient? hoverGradient;

  /// If both [disabledColor] and [disabledGradient] are provided, [disabledColor] will be ignored
  final Gradient? disabledGradient;

  /// If both [focussedColor] and [focussedGradient] are provided, [disabledColor] will be ignored
  final Gradient? focussedGradient;

  /// If both [pressedColor] and [pressedGradient] are provided, [pressedColor] will be ignored
  final Gradient? pressedGradient;

  final BoxShadow? shadow;
  final BoxShadow? hoverShadow;
  final BoxShadow? disabledShadow;
  final BoxShadow? focussedShadow;
  final BoxShadow? pressedShadow;

  final Color? contentColor;
  final Color? hoverContentColor;
  final Color? disabledContentColor;
  final Color? focussedContentColor;
  final Color? pressedContentColor;

  static _ZwapVideoPlatformButtonsDecorations get videoPlatformDecorations => _ZwapVideoPlatformButtonsDecorations();

  ZwapButtonDecorations({
    this.border,
    this.backgroundColor,
    this.borderRadius,
    this.disabledColor,
    this.disabledGradient,
    this.gradient,
    this.hoverColor,
    this.hoverGradient,
    this.focussedColor,
    this.shadow,
    this.hoverShadow,
    this.disabledShadow,
    this.focussedShadow,
    this.focussedGradient,
    this.disabledBorder,
    this.focussedBorder,
    this.hoverBorder,
    this.contentColor,
    this.disabledContentColor,
    this.focussedContentColor,
    this.hoverContentColor,
    this.internalPadding = const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
    this.pressedBorder,
    this.pressedColor,
    this.pressedContentColor,
    this.pressedGradient,
    this.pressedShadow,
  });

  /// [borderWitdh] Not used if custom border is provided
  ZwapButtonDecorations.primaryLight({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.primary900,
        this.focussedColor = focussedColor ?? ZwapColors.primary700,
        this.hoverColor = hoverColor ?? ZwapColors.primary700,
        this.disabledColor = disabledColor ?? ZwapColors.primary200,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.shades0,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.shades0,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.shades0,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.shades0,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.primary700,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.shades0,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  /// [borderWitdh] Not used if custom border is provided
  ZwapButtonDecorations.primaryDark({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.primary900Dark,
        this.focussedColor = focussedColor ?? ZwapColors.primary700Dark,
        this.hoverColor = hoverColor ?? ZwapColors.primary700Dark,
        this.disabledColor = disabledColor ?? ZwapColors.neutral300Dark,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.shades0,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.shades0,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.shades0,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.shades0,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.primary700Dark,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.shades0,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.secondaryLight({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary100,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.neutral400),
        this.disabledBorder = disabledBorder ?? Border.all(color: ZwapColors.primary200),
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.neutral400),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.neutral400, width: 1),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral700,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.primary700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral400,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.primary700,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.shades0,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.primary900,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.secondaryDark({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.shades0,
        this.hoverColor = hoverColor ?? ZwapColors.shades0,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.primary900Dark),
        this.disabledBorder = disabledBorder ?? Border.all(color: ZwapColors.neutral300Dark),
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.primary900Dark, width: 2),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.primary900Dark, width: 2),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.primary900Dark,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.primary900Dark,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300Dark,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.primary900Dark,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.shades0,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.primary900Dark,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.tertiary({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.neutral300,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary100,
        this.disabledColor = disabledColor ?? ZwapColors.neutral100,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral700,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.primary700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral400,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.primary900,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.primary200,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.primary700,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.quaternary({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary100,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral800,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.primary700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral400,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.primary900,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary300, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.primary100,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.primary700,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.destructivePrimary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    EdgeInsets? internalPadding,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Border? pressedBorder,
    Color? pressedColor,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.error50,
        this.focussedColor = focussedColor ?? ZwapColors.error50,
        this.hoverColor = hoverColor ?? ZwapColors.error50,
        this.disabledColor = disabledColor ?? ZwapColors.error25,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.error700),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.error700),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error700,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.error300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error700,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.error700, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.error50,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.error700,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.destructiveSecondary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Color? pressedColor,
    Border? pressedBorder,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.shades0,
        this.hoverColor = hoverColor ?? ZwapColors.shades0,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.error200),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.error200),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error700,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.error300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error700,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.error700, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.shades0,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.error700,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  /*  ZwapButtonDecorations.edit({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary50,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.neutral200),
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.primary100),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.neutral200),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral500,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.neutral500,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.neutral500,
        this.pressedBorder = pressedBorder ?? Border.all(color: ZwapColors.primary200, width: borderWitdh ?? 2),
        this.pressedColor = pressedColor ?? ZwapColors.shades0,
        this.pressedContentColor = pressedContentColor ?? ZwapColors.primary900Dark,
        this.pressedGradient = pressedGradient,
        this.pressedShadow = pressedShadow;

  ZwapButtonDecorations.destructivePrimary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    EdgeInsets? internalPadding,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.error50,
        this.focussedColor = focussedColor ?? ZwapColors.error200,
        this.hoverColor = hoverColor ?? ZwapColors.error200,
        this.disabledColor = disabledColor ?? ZwapColors.neutral200,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;

  ZwapButtonDecorations.destructiveSecondary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.shades0,
        this.hoverColor = hoverColor ?? ZwapColors.error50,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.error50),
        this.disabledBorder = disabledBorder ?? Border.all(color: ZwapColors.error50),
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.error200),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.error200),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;

  ZwapButtonDecorations.destructiveFlat({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.neutral100,
        this.hoverColor = hoverColor ?? ZwapColors.neutral100,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.error300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;
}

*/
}

class _ZwapVideoPlatformButtonsDecorations {
  ZwapButtonDecorations transparentRound({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Color? pressedColor,
    Border? pressedBorder,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  }) =>
      ZwapButtonDecorations(
        backgroundColor: backgroundColor ?? Color(0x00ffffff),
        focussedColor: focussedColor ?? ZwapColors.neutral50.withOpacity(0.5),
        hoverColor: hoverColor ?? ZwapColors.neutral50.withOpacity(0.1),
        disabledColor: disabledColor ?? ZwapColors.neutral50.withOpacity(0.5),
        borderRadius: borderRadius ?? BorderRadius.circular(100),
        border: border ?? Border.all(color: ZwapColors.shades0, width: 1.5),
        disabledBorder: Border.all(color: ZwapColors.neutral200, width: 1.5),
        focussedBorder: Border.all(color: ZwapColors.shades0, width: 1.5),
        hoverBorder: Border.all(color: ZwapColors.shades0, width: 1.5),
        disabledGradient: disabledGradient,
        gradient: gradient ?? null,
        hoverGradient: hoverGradient ?? null,
        internalPadding: internalPadding ?? const EdgeInsets.symmetric(vertical: 2, horizontal: 2),
        shadow: shadow,
        hoverShadow: hoverShadow,
        disabledShadow: disabledShadow,
        focussedShadow: focussedShadow,
        focussedGradient: focussedGradient,
        contentColor: contentColor ?? ZwapColors.shades0,
        hoverContentColor: hoverContentColor ?? ZwapColors.shades0,
        disabledContentColor: disabledContentColor ?? ZwapColors.shades0,
        focussedContentColor: focussedContentColor ?? ZwapColors.shades0,
        pressedColor: pressedColor ?? ZwapColors.neutral50.withOpacity(0.1),
        pressedBorder: pressedBorder ?? Border.all(color: ZwapColors.shades0, width: 1.5),
        pressedGradient: pressedGradient,
        pressedShadow: pressedShadow,
        pressedContentColor: pressedContentColor ?? ZwapColors.shades0,
      );

  ZwapButtonDecorations destructiveRound({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Color? pressedColor,
    Border? pressedBorder,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  }) =>
      ZwapButtonDecorations(
        backgroundColor: backgroundColor ?? ZwapColors.error400,
        focussedColor: focussedColor ?? ZwapColors.error700,
        hoverColor: hoverColor ?? ZwapColors.error700,
        disabledColor: disabledColor ?? ZwapColors.error200,
        borderRadius: borderRadius ?? BorderRadius.circular(100),
        border: border,
        disabledBorder: disabledBorder,
        focussedBorder: focussedBorder,
        hoverBorder: hoverBorder,
        disabledGradient: disabledGradient,
        gradient: gradient ?? null,
        hoverGradient: hoverGradient ?? null,
        internalPadding: internalPadding ?? const EdgeInsets.symmetric(vertical: 2, horizontal: 2),
        shadow: shadow,
        hoverShadow: hoverShadow,
        disabledShadow: disabledShadow,
        focussedShadow: focussedShadow,
        focussedGradient: focussedGradient,
        contentColor: contentColor ?? ZwapColors.shades0,
        hoverContentColor: hoverContentColor ?? ZwapColors.shades0,
        disabledContentColor: disabledContentColor ?? ZwapColors.shades0,
        focussedContentColor: focussedContentColor ?? ZwapColors.shades0,
        pressedColor: pressedColor ?? ZwapColors.error700,
        pressedBorder: pressedBorder,
        pressedGradient: pressedGradient,
        pressedShadow: pressedShadow,
        pressedContentColor: pressedContentColor ?? ZwapColors.shades0,
      );

  ZwapButtonDecorations fullTranparentRound({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Color? pressedColor,
    Border? pressedBorder,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWitdh,
  }) =>
      ZwapButtonDecorations(
        backgroundColor: backgroundColor ?? Color(0x00ffffff),
        focussedColor: focussedColor ?? ZwapColors.neutral50.withOpacity(0.2),
        hoverColor: hoverColor ?? ZwapColors.neutral50.withOpacity(0.2),
        disabledColor: disabledColor ?? ZwapColors.neutral50.withOpacity(0.2),
        borderRadius: borderRadius ?? BorderRadius.circular(100),
        border: border,
        disabledBorder: disabledBorder,
        focussedBorder: focussedBorder,
        hoverBorder: hoverBorder,
        disabledGradient: disabledGradient,
        gradient: gradient ?? null,
        hoverGradient: hoverGradient ?? null,
        internalPadding: internalPadding ?? const EdgeInsets.symmetric(vertical: 2, horizontal: 2),
        shadow: shadow,
        hoverShadow: hoverShadow,
        disabledShadow: disabledShadow,
        focussedShadow: focussedShadow,
        focussedGradient: focussedGradient,
        contentColor: contentColor ?? ZwapColors.shades0,
        hoverContentColor: hoverContentColor ?? ZwapColors.shades0,
        disabledContentColor: disabledContentColor ?? ZwapColors.shades0,
        focussedContentColor: focussedContentColor ?? ZwapColors.shades0,
        pressedColor: pressedColor ?? ZwapColors.neutral50.withOpacity(0.2),
        pressedBorder: pressedBorder,
        pressedGradient: pressedGradient,
        pressedShadow: pressedShadow,
        pressedContentColor: pressedContentColor ?? ZwapColors.shades0,
      );

  ZwapButtonDecorations filledRound({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
    Color? pressedColor,
    Border? pressedBorder,
    Gradient? pressedGradient,
    BoxShadow? pressedShadow,
    Color? pressedContentColor,
    double? borderWidth,
  }) =>
      ZwapButtonDecorations(
        backgroundColor: backgroundColor ?? ZwapColors.shades0,
        focussedColor: focussedColor ?? ZwapColors.neutral100,
        hoverColor: hoverColor ?? ZwapColors.neutral100,
        disabledColor: disabledColor ?? ZwapColors.neutral50,
        borderRadius: borderRadius ?? BorderRadius.circular(100),
        border: border ?? Border.all(color: ZwapColors.shades0, width: 1.5),
        disabledBorder: disabledBorder ?? Border.all(color: ZwapColors.neutral200, width: 1.5),
        focussedBorder: focussedBorder ?? Border.all(color: ZwapColors.shades0, width: 1.5),
        hoverBorder: hoverBorder ?? Border.all(color: ZwapColors.shades0, width: 1.5),
        disabledGradient: disabledGradient,
        gradient: gradient ?? null,
        hoverGradient: hoverGradient ?? null,
        internalPadding: internalPadding ?? const EdgeInsets.symmetric(vertical: 2, horizontal: 2),
        shadow: shadow,
        hoverShadow: hoverShadow,
        disabledShadow: disabledShadow,
        focussedShadow: focussedShadow,
        focussedGradient: focussedGradient,
        contentColor: contentColor ?? ZwapColors.primary700,
        hoverContentColor: hoverContentColor ?? ZwapColors.primary700,
        disabledContentColor: disabledContentColor ?? ZwapColors.primary400,
        focussedContentColor: focussedContentColor ?? ZwapColors.primary700,
        pressedColor: pressedColor ?? ZwapColors.neutral100,
        pressedBorder: pressedBorder ?? Border.all(color: ZwapColors.shades0, width: borderWidth ?? 1.5),
        pressedGradient: pressedGradient,
        pressedShadow: pressedShadow,
        pressedContentColor: pressedContentColor ?? ZwapColors.primary700,
      );
}
