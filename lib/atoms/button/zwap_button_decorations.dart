part of zwap_button;

class ZwapButtonDecorations {
  final BorderRadius? borderRadius;
  final Border? border;
  final Border? hoverBorder;
  final Border? disabledBorder;

  final EdgeInsets internalPadding;

  /// Also named active border
  final Border? focussedBorder;

  final Color? backgroundColor;
  final Color? hoverColor;
  final Color? disabledColor;

  /// Also named active color
  final Color? focussedColor;

  /// If both [backgroundColor] and [gradient] are provided, [backgroundColor] will be ignored
  final Gradient? gradient;

  /// If both [hoverColor] and [hoverGradient] are provided, [hoverColor] will be ignored
  final Gradient? hoverGradient;

  /// If both [disabledColor] and [disabledGradient] are provided, [disabledColor] will be ignored
  final Gradient? disabledGradient;

  /// If both [focussedColor] and [focussedGradient] are provided, [disabledColor] will be ignored
  final Gradient? focussedGradient;

  final BoxShadow? shadow;
  final BoxShadow? hoverShadow;
  final BoxShadow? disabledShadow;
  final BoxShadow? focussedShadow;

  final Color? contentColor;
  final Color? hoverContentColor;
  final Color? disabledContentColor;
  final Color? focussedContentColor;

  ZwapButtonDecorations({
    this.border,
    this.backgroundColor,
    this.borderRadius,
    this.disabledColor,
    this.disabledGradient,
    this.gradient,
    this.hoverColor,
    this.hoverGradient,
    this.focussedColor,
    this.shadow,
    this.hoverShadow,
    this.disabledShadow,
    this.focussedShadow,
    this.focussedGradient,
    this.disabledBorder,
    this.focussedBorder,
    this.hoverBorder,
    this.contentColor,
    this.disabledContentColor,
    this.focussedContentColor,
    this.hoverContentColor,
    this.internalPadding = const EdgeInsets.symmetric(vertical: 10, horizontal: 25),
  });

  ZwapButtonDecorations.primary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.primary700,
        this.focussedColor = focussedColor ?? ZwapColors.primary900,
        this.hoverColor = hoverColor ?? ZwapColors.primary900,
        this.disabledColor = disabledColor ?? ZwapColors.primary200,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.shades0,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.shades0,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.shades0,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.shades0;

  ZwapButtonDecorations.secondary({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary900,
        this.hoverColor = hoverColor ?? ZwapColors.primary50,
        this.disabledColor = disabledColor ?? ZwapColors.primary50,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.primary400),
        this.disabledBorder = disabledBorder ?? Border.all(color: ZwapColors.primary200),
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.primary700),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.primary400),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.primary700,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.primary700,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.shades0,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.shades0;

  ZwapButtonDecorations.flat({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    EdgeInsets? internalPadding,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary50,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral600,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.neutral600,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral400,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.neutral600;

  ZwapButtonDecorations.edit({
    Border? border,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.primary100,
        this.hoverColor = hoverColor ?? ZwapColors.primary50,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.neutral200),
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.primary100),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.neutral200),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.neutral500,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.neutral500,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.neutral500;

  ZwapButtonDecorations.destructivePrimary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    EdgeInsets? internalPadding,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.error50,
        this.focussedColor = focussedColor ?? ZwapColors.error200,
        this.hoverColor = hoverColor ?? ZwapColors.error200,
        this.disabledColor = disabledColor ?? ZwapColors.neutral200,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;

  ZwapButtonDecorations.destructiveSecondary({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    EdgeInsets? internalPadding,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.shades0,
        this.hoverColor = hoverColor ?? ZwapColors.error50,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border ?? Border.all(color: ZwapColors.error50),
        this.disabledBorder = disabledBorder ?? Border.all(color: ZwapColors.error50),
        this.focussedBorder = focussedBorder ?? Border.all(color: ZwapColors.error200),
        this.hoverBorder = hoverBorder ?? Border.all(color: ZwapColors.error200),
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.neutral300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;

  ZwapButtonDecorations.destructiveFlat({
    Border? border,
    Border? disabledBorder,
    Border? focussedBorder,
    Border? hoverBorder,
    Color? backgroundColor,
    BorderRadius? borderRadius,
    Color? disabledColor,
    Gradient? disabledGradient,
    Gradient? gradient,
    Color? hoverColor,
    Gradient? hoverGradient,
    Color? focussedColor,
    Gradient? focussedGradient,
    BoxShadow? shadow,
    BoxShadow? hoverShadow,
    EdgeInsets? internalPadding,
    BoxShadow? disabledShadow,
    BoxShadow? focussedShadow,
    Color? contentColor,
    Color? hoverContentColor,
    Color? disabledContentColor,
    Color? focussedContentColor,
  })  : this.backgroundColor = backgroundColor ?? ZwapColors.shades0,
        this.focussedColor = focussedColor ?? ZwapColors.neutral100,
        this.hoverColor = hoverColor ?? ZwapColors.neutral100,
        this.disabledColor = disabledColor ?? ZwapColors.shades0,
        this.borderRadius = borderRadius ?? BorderRadius.circular(ZwapRadius.buttonRadius),
        this.border = border,
        this.disabledBorder = disabledBorder,
        this.focussedBorder = focussedBorder,
        this.hoverBorder = hoverBorder,
        this.disabledGradient = disabledGradient,
        this.gradient = gradient ?? null,
        this.hoverGradient = null,
        this.internalPadding = internalPadding ?? const EdgeInsets.symmetric(vertical: 7.5, horizontal: 20),
        this.shadow = shadow,
        this.hoverShadow = hoverShadow,
        this.disabledShadow = disabledShadow,
        this.focussedShadow = focussedShadow,
        this.focussedGradient = focussedGradient,
        this.contentColor = contentColor ?? ZwapColors.error400,
        this.hoverContentColor = hoverContentColor ?? ZwapColors.error400,
        this.disabledContentColor = disabledContentColor ?? ZwapColors.error300,
        this.focussedContentColor = focussedContentColor ?? ZwapColors.error400;
}
